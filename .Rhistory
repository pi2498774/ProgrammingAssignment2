getwd()
help ks
help ls
ls
help(ls)
x <- 4
class(x)
x <- c(4, "a", true)
x <- c(4, "a", TRUE)
y <- c(4, "a", TRUE)
x <- c(1,3,5)
y <- c(3, 2, 10)
z <- rbind(x,y)
class(z)
dim(z)
x <- list(2, "a", "b", TRUE)
x[[1]]
a<-x[[1]]
class(a)
x <- 1:4
x
y <- 2
x + y
x <- c(3,5,1,10,12,6)
x
x[x!=6]<-0
x
x <- c(3,5,1,10,12,6)
x
x[x<=5]<-0
x
x <- c(3,5,1,10,12,6)
x[x<6]<-0
x
x <- c(3,5,1,10,12,6)
x[x<6]==0
x
x <- c(3,5,1,10,12,6)
x[x %in% 1:5]<-0
x
x <- c(3,5,1,10,12,6)
x
x[x %in% 1:5]<-0
x
wd
getwd()
setwd("C:/Users/Peter/Dropbox/31 Coursera R/03 Working Dir")
data <- read.csv("hw1_data.csv")
data
bad <- is.na.data.frame("Ozone")
bad
bad <- is.na(data$Ozone)
bads
bad
table(bad)
ozone_good <- data$Ozone[!bad]
ozone_good
mean(ozone_good)
ozone_above_31 <- data$Ozone[data$Ozone > 31]
ozone_above_31
data
data_filtered <- data[ which( data.frame$Ozone > 32 | data.frame$Temp >90) , ]
data_filtered <- data[ which( data.frame$Ozone > 32 & data.frame$Temp >90) , ]
data_filtered <- data[(data$Ozone > 31 & data$Temp > 90),]
mean(data_filtered$Solar.R)
data_filtered
data
data_filtered <- data[(data$Ozone > 31 & data$Temp > 90),]
View(data_filtered)
mean(data_filtered$Solar.R)
bad <- is.na(data_filtered$Solar.R)
solar_good = data_filtered[!bad]
solar_good = data_filtered$Solar.R[!bad]
mean(solar_good)
data_filtered <- data[(data$Month == 6),]
mean(data_filtered$Temp)
data_filtered <- data[(data$Month == 5),]
max(data_filtered$Ozone)
View(data_filtered)
View(data_filtered)
read.csv("hw1_data.csv")
data <- read.csv("hw1_data.csv")
View(data)
View(data)
str(mapply)
library(datasets)
data(iris)
?irir
?iris
force(iris)
View(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4], 1, means)
apply(iris[,1:4], 2, means)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
setwd("~/GitHub/ProgrammingAssignment2")
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(1:9, nrow = 3, ncol = 3)
m
solve(m)
m <- matrix(numif(), nrow = 3, ncol = 3)
m <- matrix(nunif(), nrow = 3, ncol = 3)
m <- matrix(2:10, nrow = 3, ncol = 3)
m
solve(m)
m <- matrix(randu, nrow = 3, ncol = 3)
m
m <- matrix(rumif(10), nrow = 3, ncol = 3)
m <- matrix(rnomr(10), nrow = 3, ncol = 3)
m <- matrix(rnorm(10), nrow = 3, ncol = 3)
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
m
solve(m)
mc <- makeCacheMatrix(m)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(mc)
mc$get()
mc$getinv()
mc$getinv()
mc$setinv()
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
View(cacheSolve)
View(m)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
m
solv(m)
solve(m)
mc <- makeCacheMatrix(m)
mc$getinv()
mc$setinv()
mc$set(m)
mc$getinv()
cacheSolve(mc)
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
mc$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
rm(list = ls())
m <- matrix(rnorm(25), nrow = 5, ncol = 5)      # create random 5x5-matrix
m               # take a look a m
solve(m)        # compute the inverse to compare it later on with $getinv result
mc <- makeCacheMatrix()
mc$set(m)       # stores m in mc
mc$get(m)       # check is m is stored and returned properly
mc$getinv()     # first time: calculates the inverse
mc$getinv()     # second time: gets inverse from cache
rm(list=ls())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m
mc
mc$getinv
mc$getinv()
mc$getinv()
mc$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
m
solve(m)
mc <- makeCacheMatrix()
mc$set(m)
mc$get()
mc$getinv()
mc$getinv()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
mc <- makeCacheMatrix()
mc$set(m)
mc$getinv()
mc$get()
m
mc$getinv()
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
mc <- makeCacheMatrix()
mc$set(m)
mc$getinv()
cacheSolve(mc)
cacheSolve(mc)
debug(cacheSolve)
cacheSolve(mc)
cacheSolve(mc)
force(x)
View(x)
View(x[["setinv"]])
View(x[["getinv"]])
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x[["getinv"]]
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
m
solve(m)
mc <- makeCacheMatrix()
mc$set(m)
mc$get()
cacheSolve(mc)
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
solve(m)
mc <- makeCacheMatrix()
mc$set(m)
mc$get()
cacheSolve(mc)
cacheSolve(mc)
m
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
m
solve(m)
mc <- makeCacheMatrix()
mc$set(m)
mc$get()
cacheSolve(mc)
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
mc$set(m)
cacheSolve(mc)
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- matrix(rnorm(25), nrow = 5, ncol = 5)
m
solve(m)
mc <- makeCacheMatrix()
mc$set(m)
mc$get()
cacheSolve(mc)
#
cacheSolve(mc)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
